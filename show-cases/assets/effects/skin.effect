// Copyright (c) 2017-2019 Xiamen Yaji Software Co., Ltd.

CCEffect %{
  techniques:
  - passes:
    - vert: general-vs:vert # builtin header
      frag: skin-fs
      properties:
        albedoMap:     { value: white  }
        normalMap:     { value: normal }
        occlusionMap:  { value: white  }
        occlusion:  { value: 1.0, target: params.x }
        roughness:  { value: 0.8, target: params.y }
        metallic:   { value: 0.6, target: params.z }
        scattering: { value: 0.5, target: params.w }
}%

CCProgram skin-fs %{
  precision highp float;
  #include <pre-integrated-sss>
  #include <standard-surface-entry>
  #include <gamma>

  in vec3 v_position;
  in vec3 v_normal;
  in vec3 v_tangent;
  in vec3 v_bitangent;
  in vec2 v_uv;

  uniform sampler2D albedoMap;
  uniform sampler2D normalMap;
  uniform sampler2D occlusionMap;
  uniform FSParams {
    vec4 params;
  };

  void surf (out StandardSurface s) {
    s.position = v_position;
    vec3 nmmp = texture(normalMap, v_uv).xyz - vec3(0.5);
    s.normal = // not normalized yet
      nmmp.x * normalize(v_tangent) +
      nmmp.y * normalize(v_bitangent) +
      nmmp.z * normalize(v_normal);

    s.albedo = texture(albedoMap, v_uv);
    s.albedo.rgb = SRGBToLinear(s.albedo.rgb);

    s.occlusion = params.x * texture(occlusionMap, v_uv).b;
    s.roughness = params.y;
    s.metallic = params.z;
    s.emissive = SSSShading(normalize(s.normal), params.w) * s.albedo.rgb * s.occlusion;
  }

  CC_STANDARD_SURFACE_ENTRY()
}%

CCProgram pre-integrated-sss %{
  #include <cc-global>

  // http://simonstechblog.blogspot.com/2015/02/pre-integrated-skin-shading.html
  vec3 preIntegratedSkinCurveApprox (float NdotL, float Curvature) {
    vec3 curve0;
    {
      const vec3 rangeMin = vec3(0.0, 0.3, 0.3);
      const vec3 rangeMax = vec3(1.0, 0.7, 0.7);
      const vec3 offset = vec3(0.0, 0.06, 0.06);
      const vec3 m = vec3(1.75, 2.0, 1.97);
      const vec3 lerpMin = vec3(0.0, 0.35, 0.35);
      const vec3 lerpMax = vec3(1.0,  0.7,  0.6);
      vec3 t = clamp(NdotL / (rangeMax - rangeMin) + (offset + rangeMin) / (rangeMin - rangeMax), 0.0, 1.0);
      vec3 lowerLine = (t * t) * vec3(0.65, 0.5, 0.9);
      lowerLine.r += 0.045;
      lowerLine.b *= t.b;
      vec3 upperLine = clamp(NdotL * m + vec3(0.99, 0.99, 0.99) - m, 0.0, 1.0);
      vec3 lerpT = clamp(NdotL / (lerpMax - lerpMin) + lerpMin / (lerpMin - lerpMax), 0.0, 1.0);
      curve0 = mix(lowerLine, upperLine, lerpT * lerpT);
    }
    vec3 curve1;
    {
      const vec3 m = vec3(1.95, 2.0, 2.0);
      curve1 = clamp(NdotL * m + vec3(0.99, 0.99, 1.0) - m, 0.0, 1.0);
    }
    // curvature is within [0, 1] remap to normalized r from 2 to 16
    float curva = (1.0 / (Curvature * (0.5 - 0.0625) + 0.0625) - 2.0) / (16.0 - 2.0);
    float oneMinusCurva = 1.0 - curva;
    float oneMinusCurva2 = oneMinusCurva * oneMinusCurva;
    return mix(curve0, curve1, 1.0 - oneMinusCurva2 * oneMinusCurva2);
  }

  vec3 SSSShading (vec3 N, float intensity) {
    vec3 L = normalize(-cc_mainLitDir.xyz);
    float wrappedNL = dot(N, L) * 0.5 + 0.5;
    vec3 scattering = preIntegratedSkinCurveApprox(wrappedNL, intensity);
    return (1.0 - wrappedNL) * cc_mainLitColor.rgb * cc_mainLitColor.w * scattering;
  }
}%
